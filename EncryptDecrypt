public string Encrypt(string PlainText, string key)
        {
            byte[] keyArray = new byte[16];
            byte[] keybyte = UTF8Encoding.UTF8.GetBytes(key);
            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(PlainText);
            HMACSHA1 hash = new HMACSHA1(keybyte);
            Array.Copy(hash.ComputeHash(keybyte), keyArray, 16);
            hash.Clear();
            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            tdes.Key = keyArray;
            tdes.Mode = CipherMode.ECB;
            tdes.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tdes.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);
            tdes.Clear();
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }
        
        
        public string Decrypt(string CipherText, string key)
        {
            byte[] keyArray = new byte[16];
            byte[] keybyte = UTF8Encoding.UTF8.GetBytes(key);
            byte[] toEncryptArray = Convert.FromBase64String(CipherText);
            HMACSHA1 hash = new HMACSHA1(keybyte);
            Array.Copy(hash.ComputeHash(keybyte), keyArray, 16);
            hash.Clear();
            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            tdes.Key = keyArray;
            tdes.Mode = CipherMode.ECB;
            tdes.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tdes.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);
            tdes.Clear();
            return UTF8Encoding.UTF8.GetString(resultArray);
        }
